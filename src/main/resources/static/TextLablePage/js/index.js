var docUrl=getQueryVariable("docUrl"); // 文本URL
var userId=getQueryVariable('userId'); //用户ID
var acceptId=getQueryVariable('acceptId'); //接受任务ID
var pageType=getQueryVariable('pageType');  //当前页面类型
var pageFrom=URLencode(getQueryVariable('pageFrom')); //从那个页面跳转来的（返回时使用）
var operation=getQueryVariable('operation'); //read，write
var taskId=getQueryVariable('taskId'); //任务ID
var docUrlPre="D://docTask//";
var originaldoc;
var docNotFinishlist=[];
var colorArray=[ //颜色数组
    '#33A02B',
    '#F9001B',
    '#96017E',
    '#FFB200',
    '#0F3193',
    '#99CF17',
    '#FE4D01',
    '#3E007D',
    '#FFD900',
    '#0950A0',
    '#FF7F00',
    '#00978B'
];
$(function () {
    editor.setData("<p>大连理工大学毕业设计（论文）格式规范<br>重庆交通大学2018<span style=\"color:rgb(51,160,43);\"><strong>#届计算机科学与技术&lt;人名 &gt;#</strong></span>专业毕业设计（论文）<br><br><br><br>本科毕业设计（论文）<br><br>题目： 量化交<span style=\"color:rgb(249,0,27);\"><strong>#易可视&lt;地名&gt;#</strong></span>化分析系统&nbsp;<br><br>设计与实现&nbsp;<br><br><br><br><br>学 院： 信息<span style=\"color:rgb(150,1,126);\"><strong>#科学与工程&lt;公司名&gt;#</strong></span>学院&nbsp;<br>专 业： 计算机科学与技术&nbsp;<br>学 生 姓 名： 郑建峰&nbsp;<br>学 号： 631406010203&nbsp;<br>指 导 教 师： 李 韧&nbsp;<br>评 阅 教 师： 米 波&nbsp;<br>完 成 时 间： 2018年5月25日&nbsp;<br><br>重庆交通大学<br>CHONGQING JIAOTONG UNIVERSITY<br><br>本科毕业设计（论文）原创性声明<br>本人郑重声明：所提交的毕业设计（论文），是本人在导师指导下，独立进行研究工作所取得的成果。除文中已注明引用的内容外，本论文不包含任何其他个人或集体已经发表或撰写过的作品成果。对本文研究做出过重要贡献的个人和集体，均已在文中以明确方式标明。<br>本人完全意识到本声明的法律后果由本人承担。<br>作者签名（亲笔）： 年 月 日<br>-----------------------------------------------------------------------------------------------------------------<br>本科毕业设计（论文）版权使用授权书<br>本毕业设计（论文）作者完全了解学校有关保留、使用学位论文的规定，本科生在校攻读期间毕业设计（论文）工作的知识产权单位属重庆交通大学，同意学校保留并向国家有关部门或机构送交论文的复印件和电子版，允许论文被查阅和借阅；本人授权重庆交通大学可以将毕业设计（论文）的全部或部分内容编入有关数据库进行检索，可以采用影印、缩印或扫描等复制手段保存、汇编毕业设计（论文）。<br>作者签名（亲笔）： 年 月 日<br>导师签名（亲笔）： 年 月 日<br><br><br><br><br><br><br><br><br><br><br><br><br>摘 要<br>近几年，在大数据和机器学习的推广下，金融市场也开始利用信息技术来处理数据，可以看出，金融领域和信息学科相结合是大势所趋。但由于我国量化交易起步较晚，导致智能选股模型稀缺且可靠性不强，故充分利用开源财经数据接口和互联网资源，对金融数据收集、加工和存储，并在分析国内外量化交易的发展现状以及充分调研的基础上构建本系统的研究方向，设计相应数据库，通过可视化技术将证券数据以图像的方式展示给用户，协助其建立数学模型，并在可视化验证无误后，将其模拟上线，对其进行实时监控，构建这样一个适应性强、数据可靠、分析直观、程序交易的量化交易可视化分析系统。<br>本系统的实现方法主要包括：<br>（1）利用pandas和numpy库，以实现对大量数据的高效处理；<br>（2）采用mongdb这种非关系型数据库，搭建分布式数据库，增强数据库的容错性和可扩充性；<br>（3）利用系统具备的移动端微信小程序，实现对模型策略上线运行后的实时监督，使投资者可以在远程时刻了解投资具体策略的收益情况。<br>通过数据可视化协助完成量化策略的建模是本系统的关键，不仅可以解决股票数据多维性、繁琐性给用户带来的分析困难，而且对辅助量化分析人员建模，乃至对促进量化交易的发展都具有重要意义。<br><br>关键词：量化交易；可视化分析；金融数据<br><br><br>大连理工大学毕业设计（论文）格式规范<br>量化交易可视化系统设计与实现<br>- II -<br>- II -<br><br><br>Design and Implementation of Quantified Trading Visual Analysis System<br><br>Abstract&nbsp;<br>In recent years, under the promotion of big data and machine learning, the financial market has begun to use information technology to process data. It can be seen that the combination of the financial field and the information discipline is the general trend. However, due to the late start of quantified transactions in China, the smart stock selection model is scarce and the reliability is not strong. Therefore, the open source financial data interface and Internet resources are fully utilized to collect, process and store financial data, and the quantitative transactions at home and abroad are analyzed. Based on the status quo of development and full investigation,the research direction of the system is constructed,the corresponding database is designed,and the securities data is displayed to the user in an image through visualization technology to assist him in establishing a mathematical model,and after the visual verification is correct,the simulation is performed on the line,Real-time monitoring of it, the construction of such a highly adaptable,reliable data,intuitive analysis,program trading, quantitative transaction visualization analysis system.<br>The method for realizing this system mainly includes:<br>(1) Using pandas and numpy libraries to achieve efficient processing of large amounts of data;<br>(2) Using mongdb non-relational database to build a distributed database to enhance the fault tolerance and scalability of the database;<br>(3) Using the mobile micro-message applet provided by the system to realize the real-time supervision of the model strategy after going online, so that investors can understand the benefits of investing in specific strategies at a remote time.<br>Helping to complete the modeling of quantitative strategies through data visualization is the key to this system. It can not only solve the difficulty of analyzing the multidimensionality and tediousness of the stock data to the users, but also model the auxiliary quantitative analysis personnel and even promote the development of quantitative transactions. Both are of great significance.<br><br>Key Words：Quantitative Transaction; Visual Analysis; Financial Data<br><br>量化交易可视化分析系统设计与实现<br>- V -<br><br>目 录<br>摘 要 II<br>Abstract III<br>1 绪论 1<br>1.1 研究背景 1<br>1.2 研究意义 2<br>1.3 国内外现状描述 2<br>1.3 国内存在问题 3<br>1.4 本文结构 4<br>2 系统相关技术 6<br>2.1 系统框架 6<br>2.2 开发语言 6<br>2.3 系统主要技术 7<br>2.8 本章小结 10<br>3 需求分析 11<br>3.1 系统用户 11<br>3.2 功能需求 12<br>3.2.1 数据需求 12<br>3.2.2 查看市场行情需求 13<br>3.2.3 监督策略运行需求 14<br>3.2.4 查看历史记录需求 15<br>3.2.5 在线分析需求 15<br>3.2.6 技术指标可视化需求 16<br>3.2.7 其他需求 18<br>3.3 非功能需求 18<br>3.3.1 性能需求 19<br>3.3.2 稳定性需求 19<br>3.3.3 可扩展性 19<br>3.3.4 界面需求 19<br>3.4 本章小结 20<br>4 系统架构 21<br>4.1 系统总体设计 21<br>4.1.1 系统总体划分 21<br>4.1.2 体系架构 23<br>4.1.3 系统运行环境 24<br>4.2 系统详细设计 24<br>4.2.1 数据获取模块 24<br>4.2.2 数据校验模块 26<br>4.2.3 查看市场行情模块 27<br>4.2.4 监督策略运行模块 28<br>4.2.5 查看历史记录模块 29<br>4.2.6 在线分析模块 30<br>4.2.7 其他模块 31<br>4.3 本章小结 32<br>5 系统实现 33<br>5.1 数据获取 33<br>5.2 数据分析 36<br>5.3 市场行情 38<br>5.4 模型监督 40<br>5.5 查看历史记录 41<br>5.6 在线分析 41<br>5.7 可视化验证 45<br>5.7 技术指标可视化 46<br>5.8 其他模块的实现 48<br>5.9 本章小结 52<br>6 测试 53<br>6.1 测试用例 53<br>6.2 系统评价 55<br>总 结 56<br>致 谢 57<br>参考文献 58<br><br><br>1 绪论<br>1.1 研究背景&nbsp;<br>理论和实践经验表明，在对由投资者群体建立起来的金融市场进行分析时需要用到多种方法，建立技术指标分析和通过基本面分析是传统分析方法[1]。<br>基本面分析方法是以最近几年乃至几十年的经济和政策数据为最大的分析依据，通过对金融市场的未来走势的判断来解读与指导当前与未来的投资决策[2]。但是，单纯依赖数据对目前形势进行判断往往不能直接作出最终的决策，不仅因为金融市场包含了很多无法完全用数据来衡量的东西，还加上当今全球经济形势复杂多变，金融市场自身快速发展，而狭义的基本面分析方法主要从微观层面分析行业之间的供求关系，市场环境和政策导向来预测未来，缺乏对宏观的经济、政治因素以及市场情绪的研判，就很难对一个行业的发展趋势做出适当的把握。所以，单纯期待通过基本面来指导的投资结果必定具有极大的不确定性。<br>近几年，在大数据和机器学习的推广下，金融市场也开始利用信息技术来处理数据，可以看出，金融市场和互联网IT产业相结合是大势所趋，量化交易必将在二者的结合下迅猛发展[3]。因技术指标在数据的具体处理与应用方面显示出严密的逻辑性与可再现性，使得利用信息技术解决前述问题成为可能。量化交易相较于基本面交易，主要是利用计算机从庞大的历史数据中做出一些统计，发现历史中类似的现象，选出可以产生超额收益的“大概率事件”并以此为基础来制定相应策略[4]。这类应用的基本原理是：历史总是具有重复性和相似性，从金融市场产生到如今，人们的贪婪和恐惧都至始至终存在着，整个金融市场下这种心理变化微乎其微，不可否认，总结投资者在历史中经历的价格走势及盈亏对未来有指导作用。因此，从技术指标层面上讲，在各类数据存在的各种模式中提取出相同的指标特征，可以很好地把握住获取超额利润的机会。<br>在计算机科学飞速发展的技术支持下，为了实现辅助分析与再现客观的目标，海量的互联网数据、金融数据都需要进行可视化处理[5]。数据的可视化技术是运用计算机图形学和图像处理技术，将数据转换为图形或图像在屏幕上显示出来，并进行交互处理的理论、方法和技术[6]。它涉及到多个学科领域，包括有计算机图形学、计算机图像处理技术、计算机辅助设计、计算机视觉以及人机交互技术等领域[7]。总而言之，可视化技术是将数据化繁为简，直观显示的过程。它以数据为生产资料，以计算机图像处理为处理方法，以数据化繁为简，直观显示为目标，最终人能够直观、浅显地获取到模拟过程和可视化结果。该技术提升了科学探索的进程，对于人类探索和发现未知事物潜在的规律具有重大意义。可视化的应用领域也随着计算机技术与计算机图形学技术的迅猛发展而不断拓宽，除了在医学、航空学、汽车设计、气象预报和海洋学等领域的广泛应用外[8]，还被广泛用于VR等领域[9]。并且，由于在网络通信技术和B2B的共同促进下，各种信息的可视化已成为可视化技术的研究热点，显然，应用可视化技术，可以发现具有大量与人类活动密切相关的金融和商业等领域各自数据中隐含的内在规律，从而为决策提供合理依据。<br>1.2 研究意义<br>近几年，国内金融市场在积极变化，到目前为止证券期货、外汇和现货等金融衍生品全都已经计算机化。交易所逐渐面向投资公司与广大投资者开放使用在线交易的权限，各种金融衍生品的权限也几乎同步开放。金融市场和计算机行业并行高速发展，使得量化投资交易逐渐成为未来主要的交易方法[10]。<br>将数据可视化技术应用于金融领域，将复杂异构的金融数据通过可视化技术手段，呈现出直观的二维图形、三维图形，将有助于用户发现与分析金融数据背后潜在的逻辑，迅速做出有依据的判断与决策[11]。因此，研究如何将可视化技术更好地应用于金融领域具有重要意义和价值。<br>1.3 国内外现状描述<br>上世纪末，在多个投资机构的共同推动下，DiscoverBrokerage Direct公司率先带头研发了第一个证券交易系统，并且该系统被广泛的使用[12]。接着，在1996年，Charles Schwab公司开始提供网络证券交易业务，凭此吸引了许多潜在用户。到1997年底，其线上用户大约有120万，并且在一年后超越了550万，线上用户的数目占到了公司全部客户的60%，同年其线上交易金额高达2000亿美元。借此，公司总裁获得了98年美国证券市场最具影响力十大人物的称号[13]，这也从侧面反应出线上证券对股市的重大影响。从世界范围来看，美国开创了线上证券的先河，同时成为了全球证券交易包括数量以及成交额最高的国家[14]。美国股票市场一片繁荣，势头迅猛，并且在一定程度上直接或间接地影响了全球股市的发展动向。超过了美国整个交易金额百分之九十六的股票交易都是通过线上的形式完成的[15]。美国SEC(证券交易委员会)提供的数据表明，整个美国有不超过100个证券机构开设了线上服务，线上客户也多达1300万，高于三成的美国家庭使用网络完成股票投资[16]。线上证券市场在美国短时间内迅猛扩展的原因主要有三个方面：第一，线上业务不受时间与空间的限制，能够随时随地完成想要的操作；第二，线上交易花费很少；第三，互联网在美国的普及率几乎达到百分之百，每个普通家庭的日常工作和生活均离不开网络通信。韩国在亚洲范围内第一个引进了网上证券交易系统。截止到2008年，韩国线上证券交易在总业务中占比已经为97.6%，成为世界上比例最高的国家，同时也是证券交易系统发展状况最好的国家之一[17]。再如近邻，日本的证券交易大多都是在线上完成。最新的研究表明，在日本，各个证券机构的客户数目和其交易金额一起快速上涨，交易金额达到了50万亿之多，是目前的最高水平，相应的，线上用户数量也持续攀升[18]。虽然美国、韩国和日本仅仅是国外发展状况的一个缩影，但这些都能展现出国外互联网证券交易在迅猛发展。<br>相比国外，国内证券公司引进网上证券交易系统起步较晚一些，但是，在这些年迅猛发展的市场经济的影响下，国内网上证券交易系统也取得了不错的成绩，尤其在业务金额以及系统技术方面，还与国外有一定的差距，表现在一开始证券的主要业务内容通过线下单位完成，而人工服务逐渐无法满足证券市场规模不断扩大，内容不断复杂化的发展状况。从1996 年开始，一些证券机构对其网上业务进行了实验性的开展，经过最初的踌躇，之后的实验以及真正的试用等阶段之后，国内网上证券交易在国泰君安的带动下发展了起来[19]。紧接着，华夏证券、海通证券、广发证券等许多证券公司都引进了网上业务服务。这样的证券交易创新也推动了证券公司进行一系列相关变革，打破了线下人工完成交易活动中无法实现信息互通的状况，减少了人力财力的消耗，导致这样的形式逐渐扩大，使国内证券交易格局慢慢转变为了以人工服务为核心，以金融服务商提供的其他交易系统为补充的形式。<br>1.3 国内存在问题<br>国内的量化交易人员主要分为两类，一类是策略研究人员，另一类是一般的证券投资者。<br>策略研究人员一般具有良好的数学基础和程序开发能力，他们的目的是从股票数据中挖掘信息，分析数据，通过建立数学模型并筛选出合适“做多”的时间与股票，再通过合适“做空”时机出手，以获取收益。因此他们将面临下列着三个问题：<br>（1）金融数据源在数据时代，数据是非常昂贵的，数据都集中在各大券商手中，对于一般的策略研究人员无法支付相应费用。另外券商所提供的数据只涵盖基本的股票数据，而实际的建模过程可能还要借助公司基本面数据、消息面数据等。<br>（2）回测验证，回测验证是策略研发至关重要的一个步骤，是用历史数据来测试当前模型，统计判断，该模型在历史数据中的收益情况。研究人员在模型建立后，会用历史数据测试，很多情况下，需要对每一个“做多”或者“做空”机会进行验证，这个工作量很大且效率很低。<br>（3）上线测试，在模型建立后，如若立刻将模型在实盘中运行，要是模型存在缺陷，将会一败涂地。这样风险极大，若存在一个沙箱环境，模拟模型上线的过程，并实时了解其收益情况，会对策略研究人员的帮助很大。<br>一般证券投资者往往不会研发策略，它们会致力于寻找一个较好的模型，按需投资以获取收益。他们面临着两个问题：<br>（1）寻求模型，对于投资者而言，找到一个良好的模型投资并从中获取收益是他们的最终目标，但在量化投资领域还未盛行的中国，模型大多掌握在机构手中，所以对于量化投资者来讲，找到优质的量化模型十分困难。<br>（2）监督模型，在投资一个模型后，对于该模型的表现，投资者十分关心，他们希望能够对该模型有一定的了解和监督模型在实盘中的运营情况，并能得到该模型的一些指标（如单利收益）的统计。<br>1.4 本文结构<br>本文共分为六章，各章的内容安排如下：<br>第一章 绪论，综合介绍了本文选题背景、研究意义、国内外现状描述和国内外存在问题。<br>第二章 系统相关技术，主要介绍了本系统的系统框架、开发语言和系统开发所采用的相关技术。<br>第三章 系统需求，主要介绍了系统用户、功能需求和非功能需求。<br>第四章 系统架构，介绍了系统总体设计和系统详细设计。<br>第五章 系统实现，介绍数据获取、数据分析、市场行情、模型监督、查看历史记录、在线分析等各个模块的代码实现和实现结果。<br>第六章 测试，介绍了测试用例和对系统整体性评价。<br><br><br>2 系统相关技术<br>本章节将阐述系统所采用的相关技术，并说明这些技术原理、特点等。<br>2.1 系统框架<br>Django是一个python web应用框架[20]，它是基于MVC（模型、视图、控制器）的设计模式实现的。但它不同于一般MVC架构的是，框架会自行处理部分控制器的内容，在Django框架中，它更关注的是MTV（模型、模板、视图），因此它又被称之为MTV模式[21]。模型、模板和视图，它们按照逻辑被划分为三个层次，并且各自承担的职责各不相同，如表2.1所示。<br><br>表2.1 MTV表<br>名字 逻辑层次 职责<br>模型 数据存储层 处理数据包括CURD等<br>模板 业务逻辑层 处理与视图层相关的决定<br>视图 变现层或可视化层 存取模板，是模型与模板的桥梁<br><br><br>总之，视图的作用是决定用户可以查看具体哪些数据，而模板的作用只决定怎么把指定的数据展现给用户。从上表可以看出，MTV是把MVC中的视图这一逻辑层次再进一步的分解为视图和模板两层。其实，MVC中的控制层的核心要件就是URLconf。URLconf的原理就是通过正则表达式去匹配定义的URL，从而将调用相应的函数或者方法。其中，URLconf对URL的命名不做任何限制。对控制层实现完全托管后，视图层与数据的交互只是对数据库表的CURD操作。所有在编写具体程序时，无需考虑控制层，只需调用相应的函数或者方法即可，从而也极大地提高了工作效率。<br>2.2 开发语言<br>python的使用率是所有语言中增长最快的，随着在大数据时代的到来，它在数据分析、处理方面处于领先位置，同时它又具备java、C#等语言的开发效率。本课题涵盖海量的金融数据获取、分析、处理，选用python作为开发语言，下文将说明选择python的原因。<br>编写简单：Python 作为高级语言，面向对象也是它的特性之一，学习成本低，开发效率高，它相较于c++等语言，它的使用更简单。Python被认为编写风格最规范，同时也是最容易理解的编程语言之一。<br>丰富类库：Python拥有庞大的类库。它的类库可以帮助处理各种各样任务，包括RE(正则表达式)、文件IO、测试驱动开发、多进程与多线程、数据库连接、网页浏览器、CGI、FTP、电子邮件、CSV文件、GUI、Tk等等常用开发的有关的操作。另外，其他语言比如c++，在c++编写完成和封装后，可以将其存放到python的库文件中，使之成为Python扩展类库，因此又被称之为很形象的“胶水语言”。<br>Python高效便捷：Python本身的实现用C语言完成的，并且对效率具有要求的标准库与第三方库都是用C编写完成的，因此它运行速度是非常快的。并且python还具有跨平台的特性，python应用程序可以在任务的主流环境下使用或者部署，并且性能差距也不大，同时，Python可以进行Web开发开发。<br>具备独有的大数据分析能力：与java的长盛不衰相似，处于大数据时代中，Python备受欢迎受益于大数据和云计算的普及。另外，python在机器学习和人工智能系统智能领域的也具有独特优势，因为它能很高效的整理、分析、组合基本数据，因此它是数据科学中的佼佼者。<br>2.3 系统主要技术<br>Mongo的底层是采用C++语言编写实现的，是被广泛使用的开源数据库系统。它在硬件支持能力的临界条件下，可以通过增加硬件资源，利用网络通信，实现线性扩充数据库性能。本系统采用该数据库，目的是为了解决异构的、海量的证券相关数据存储问题，并为系统提供高可靠、可扩展的数据管理服务。该数据库将数据以文档的形式存储在内存中，数据结构由key-value(键值对)组成，与python的字典和json格式相似。它的key或者value可以为复杂的数据结构，比如json、list等等。查阅有关资料，将MongDB[22]特征总结如下：<br>（1）快速查询。通过对表中的一个或者多个字段添加索引，在查询数据是效率极高，对于百万级数据，也可以在数秒内完成搜索。另外还支持客户端使用js脚本，并且可以将其保存以便后续使用，因此，它还为数据服务提供更多可能性。<br>（2）稳定性。通过网络建立数据镜像，实现数据实时备份，也因此数据库有具备更为强大的稳定性，它类似于服务器集群的负载均衡，若随着某单点任务的增加，它可以动态地将任务分布给集群中其他的较为空闲的节点。<br>（3）多条件查询、更新，它的查询参数是json数据类型，因此它可以同时设定多个条件，实现多条件查询。例如，通过update()命令实现对a、b、c三个字段同时更新，只需定义查询条件sql={a=’A’， b=’B’， c=’C’}，并调用系统方法update（sql）即可完成多条件更新。它的底层是基于Map实现批处理与reduce实现聚合。Map可遍历所有记录，并将结果传给Reduce操作。<br>AJAX的全称是Asynchronous JavaScript And XML[23]。它并非编程语言，仅仅是一种新的技术，一种可以使web应用程序加载速度更快、交互性也更强的技术。它是通过使用JS在客户端与服务器端来请求和收发数据，它通过在幕后与服务器交换数据，不用当用户作用请求时，就重新刷新整个网页页面，AJAX 技术可以做到减轻了服务器的压力，不需要插件支持，能使页面与数据分离，提高用户舒适度。<br>ECharts是一套功能强大的，基于js的前端可视化框架。它提供了常用的折线图、散点图等常规二维图形，也提供热力图等关系图形。除此，基于框架提供的基本功能，用户可构建更为复杂的多维图型，框架也提供自定义接口，用户可自定义图形，将定义的图形结果传入接口，即可映射设计的图形。<br>为了配合大数据量的展现，EChart[24]还支持输入TypedArray格式的数据。TypedArray 在大数据量的存储中可以占用更少的内存，对GC友好等特性也可以大幅度提升可视化应用的性能。<br>在Echarts的开发实现过程也比较简便，只需要三步即可完成，首先获取数据，在本系统中，系统已开放各种数据接口；然后数据处理和配置option，option的参数见图2.1所示；最后通过代码myChart.setOption(option)即可在web页面中可视化数据。<br><br><br>图2.1 option参数配置图<br><br>Matplotlib是一个Python 2D绘图库[25]，其可以在跨平台的在各种硬拷贝格式和交互式环境中绘制出高品质图形。该库中包括最为常用pylab模块。模块封装了数据处理函数和可视化函数，可以帮助用户快速计算并绘图，Matplotlib绘制图形也只要需三步即可，首先是获取数据，通过系统基本的CRUD操作得到数据，然后通过pandas或者numpy对数据进行处理，最终通过Matplotlib可视化图形，以绘制A股股票平安银行的k线图为例，绘制结果如图2.2所示所示。<br><br><br>图2.2 平安银行k线图<br><br>Pandas和Numpy是系统主要的数据分析处理工具。Pandas[26]是开源的数据处理库，它为Python编程语言提供高性能和方便使用的数据结构和数据分析工具。Numpy是用Python实现科学计算的基本包。它具备产生随机数能力和线性代数计算能力，它还可以用作特殊的数据结构保存多维数据。由于python可以定义任意的数据类型。造就Numpy可以实现与数据库集成。<br>python在近年的受欢迎程度是扶摇直上，正是得益于python在数据分析处理方面的强大功力，Numpy和Pandas库提供大量的分析处理方法，在本系统的实现中也大量使用到该库，在处理百万级数据时，系统处理数据具有明显效果。Numexpr是Numpy的豪华升级版，它利用多线程技术将所有内核利用起，因此它的速度会比Numpy更快。<br>2.8 本章小结<br>本章就系统所采用Django框架、开发语言、系统所运用的相关技术进行详细阐述。介绍了Django独有的MTV模式可以无需关心控制层的实现，说明了采用python作为开发语言的具体原因，描述了所用技术的特点和先进性。<br><br><br>3 需求分析<br>需求分析是整个系统开发周期最重要的过程之一，它将决定后续系统设计和实现的质量和验收标准。本章节将着重按照系统的用户、功能需求、非功能需求进行阐述。<br>3.1 系统用户<br>对量化交易可视化分析系统而言，它面向两类用户，一类是具备一定数学建模能力的模型研究人员，一类是一般的量化交易投资者。<br>其中，就模型研究人员而言，该系统应将金融数据可视化并协助其建模。模型研究人员的功能需求主要包括查看市场行情、监督策略运行、查看历史记录、在线分析等。下图3.1展示了模型研究人员的用例图。<br><br><br>图3.1 模型研究人员用例图<br><br>一般的量化交易投资者的功能需求主要有自选股、看盘（今日推荐）、查看近期推荐等。下图3.2是一般量化投资者的用例图。<br><br><br>图3.2 量化投资者用例图<br><br>3.2 功能需求<br>在充分调研用户的需求后，根据用户所需系统功能，将对用户对系统的功能需求进行汇总。<br>3.2.1 数据需求<br>在上文也提到数据是本系统的基础，因此获取数据功能是该系统的重中之重。<br>（1）获取基本金融数据<br>基本金融数据包含公司基本面数据、消息面数据、股票价格数据。其中价格数据又包含实时数据和历史数据。<br>基本面数据是反应公司盈利能力、营运能力、成长能力、偿债能力等基本数据，通过基本面数据，能够了解公司实际的运营情况、债务情况等。公司盈利能力的代表有净利润、净资产收益率等，营运能力的代表有流动资产周转率、应收账款周转率等，成长能力的代表有总资产增长率、股东权益增长率，偿债能力的代表有现金比率、现金比率。<br>消息面数据是国家政策的发布事件，如“雄安新区”消息事件，特别重大事件，如席卷全球的“中美贸易战”等消息事件，上市公司重大特别是事件，如前乐视董事长贾跃亭失信离国等看。消息面数据的特点就是，该消息事件在近期会影响该公司股票的价格走势，或利好，或利空。<br>证券实时数据是指各交易所公布的精确到当前时刻的价格数据，有股票、期货、外汇等数据，其中它们包括成交量、当前价格、买一到买五、卖一到卖五、成交额等。这些实时数据按照市场可以分为美国、香港、中国等，实时数据对于信号的判断和实时收益的计算必不可少，因此它也是系统最重要的数据之一。<br>证券历史数据是指证券的所有历史信息，包括分钟数据、小时数据，日数据等，每组数据涵盖各个时间间隔的最高价、最低价、开盘价、收盘价，成交量、成交额等数据。该部分数据将用作模型的历史回测，因此也是至关重要的一部分。<br>便于系统后续的处理和应用，系统需要将上述数据通过技术手段获取后，并保存到系统的数据库中。<br>（2）数据校验需求<br>显然，上述基本金融数据是离散的、数据量巨大的，虽然具有时序性，但仍旧不是人眼可以区分正误的，因此，系统能够校验数据，保证数据的正确性是关键的一环，消息面数据和公司基本面数据的缺少、丢失对系统影响不大，但证券实时数据和证券历史数据缺失将会对模型的回测和实时监督，所以保证证券实时、历史数据是数据校验模块的目的。<br>3.2.2 查看市场行情需求<br>对于每一个证券从业、投资人而言，看盘是必不可少的一步，都会在了解客观行情后，再做投资，其实对于判断市场行情在中国国代就已经存在，古代商人就注意市场行情有关信息的收集和分析，但真正对市场行情进行调查研究是从资本主义社会开始的。生产者的生产活动与经营的活动，要通过商品上市后的实际情况界定。为了在博弈中获取成功，就必须对市场做仔细分析。对供求和价格的变化及其原因进行认真分析，并对变化的趋势作出预测，从而总结出商品经营的经验。而对证券市场而言，这里的商品正是证券。用户对市场行情的需求如下：<br>（1）收集和分析行情：大盘指数的走势一般可以反应行情，在结合个股表现，分析个股收益、次新跌幅、次新涨幅、换手率、最小市值、站上ma10只数、站下ma10只数、站下ma20只只数、站上ma20只数、放量上涨、放量下跌、板块表现，最终通过风险指数判断行情。上述数据的具体意义如下：<br>个股收益：在某个时刻内，用该时刻的收盘价close和开盘价open计算出价格的变化率，即个股收益，个股收益的计算：个股收益=收盘价/开盘价-1。<br>次新涨幅：次新股是指自上市之日到现日期超过某个周期尚未分红的股票，在A股市场周期为一年。次新涨幅就是次新股的个股收益。<br>换手率：它是指在某个时间范围内，某只股票交易买卖的频率，它是反应市场流通性的一个指标。<br>（2）可视化行情，通过K线图和成交量图的形式展示给用户，该图能滑动加载更早数据，能搜索所有指数数据，概念板块数据，均线显示5分钟、10分钟、20分钟、30分钟并且通过事件实现显示与隐藏的切换；另外统计换手率、次新涨幅、最小市值、涨停只数、跌停只数等并通过直方图可视化显示，该图能伴随k线图的时刻显示，即通过点击k线图即能显示相应时刻的直方图；还需回测历史数据，对盘中行情进行风险预测并推荐建议仓位，同理，该部分也要伴随k线图的时刻显示。<br>（3）登录，在进入系统首页后，系统要求用户输入的用户名和密码，在匹配成功后登录系统。系统显示其用户相应信息，用户获得权限进入界面进行操作使用，如果登录失败则系统不允许用户能正常使用系统。<br>3.2.3 监督策略运行需求<br>对建模而言，在模型建立完成后，可部署到系统中，投资者可通过系统了解的该策略的是运营实况，同时建模人员可以通过系统实时的反馈运营信息，及时调整模型，防止模型缺陷为投资者带来损失，该功能发挥两点作用：<br>（1）策略监督：除了了解实时收益外，还可通过选股结果查看其对应的k线数据，了解其形态是否符合模型的选取结果，已达到再次验证的目的。<br>（2）投资选择：投资者是很难寻找到一个适合的模型投资的，该功能模块需将所有策略的近期信号按照图表的形式展示，需要展示的内容有：股票代码、股票名称，建仓价格、实时价格、买入时间，平均涨幅以及持仓状态，这些数据使得投资者能够真实、清晰的了解到该模型实盘运营效果。<br>3.2.4 查看历史记录需求<br>历史记录是总结策略的收益和交易记录，同时能够查看历史的收益情况和了解正在交易的实况。该功实现统计年收益率并通过面积图直观显示，统计显示相应策略的波动率、日均信号、盈亏比、年化收益、夏普值、单利收益、复利收益等，统计每天的交易记录，并能够通过面积图，找到对应时间段的交易记录，将交易中的股票信息进行记录并可视化，需将日期，账户、股票好、当前价格、买价、收益等信息通过表格显示。<br>3.2.5 在线分析需求<br>在线分析包括板块跟踪分析、搜索对比分析、多角度分析。<br>（1）板块跟踪分析<br>板块历史跟踪分析是针对板块指数和个股对某天内，时间间隔为五分钟的涨跌幅走势，以及某时刻涨跌加速与涨跌数量的分析。通过日期搜索，可分析具体一天的板块走势，通过绑定涨跌幅走势与涨跌加速，通过某时刻涨跌，可查看相应时刻的加速度；在统计涨跌加速度的同时也统计该时刻上涨只数、下跌只数、持平只数。<br>板块数据常常遵循传统证券投资的“一致性”原则和“物极必反”原则，因此，跟踪大盘板块数据的变化，能够协助建模人员对数据的理解。例如，2018年1月15日14:50分整个大盘在15:35分至15:40分五分钟内只有三个板块上涨，其余全部下跌，根据“物极必反”原则，接下来行情可能会发生反转，事实上，从15:45开始，整个大盘行情全部上涨。<br>（2）搜素对比分析需求<br>搜索对比分析是将两个以上的板块指数或者个股按照时间间隔，通过股票号码和日期，将其价格数据，成交额、macd数据查询出来，并通过可视化技术绘制出kline图、ma图、成交量图、macd图，建模人员可通过其对比，探索规律。<br>在建模过程中常遇到两只或者股票在某种形态下都上涨或者都下跌，通过看盘软件无法完成对比，使得建模人员无法验证猜想，因此，通过股票号码和日期将系列股票数据可视化出来，进行对比，即可验证猜想是否合理。<br>（3）多角度综合分析需求<br>多角度综合分析主要受众是策略建模研究人员，而金融数据具有海量性、离散性、异构性等特点，所以其初始数据很繁杂，不便于发现规律和建立模型。多角度综合分析是将某些股票用折线图、散点图、直方图等按照时序让其“运动”起来。该该功能按照时序可视化股票价格、股票收益率、股票收益的变化率，分别从不同角度为建模人员提供开发思路，包括了实时价格走势、价格加速度、散点走势。<br>第一，实时价格走势。实时价格走势是指，在开盘时间，所选股票的价格能够按照时间递增的顺序增长、变化起来，能直观的观察价格变化的幅度，以及各股票间的变化关系。<br>第二，价格加速度。价格加速度是股票收益率的变化率，类似于物理学中速度和加速度的关系，因此我们称收益率的变化率为价格加速度，该指标能够反应在单位时间内价格振幅的变化。<br>第三，散点走势。散点走势分析是将价格变化率按照时序可视化出来，随着时间的变化，散点就会“运动”起来，在坐标轴中，一象限表示上个周期价格上涨本周期价格也上涨，二象限表示上个周期价格上涨本周期下跌，三象限表示上个周期和本周期价格均下跌，四象限表示上个周期下跌而本周期上涨，由此，可根据散点集中的象限可直观的观察所选系列股票股票价格的变化。<br>3.2.6 技术指标可视化需求<br>技术指标可视化是指将kdj[27]、macd[28]、boll[29]、ma[30]、vol[31]技术指标通过计算。并将计算结果可视化，最终的到的图像结果，可将协助用户分析数据，将该图像进行赋予标签，对其分类，可运用在机器学习中。下面将介绍这些指标和相应计算方法：<br>（1）kdj指标。KDJ指标也叫随机指标。首先计算出一个未成熟值，计算方法是：通设定一个时间间隔（各券商均选择9个周期），计算该间隔内的high值、low值、close值以及相互之比，如RSV的计算公式3.1：<br>（3.1）<br>计算出基本的RSV后，可以计算出k值，某周期k值等于，等于当前周期的RSV值的三分之一与上一周期K值的的三分之二之和，该方法是一个迭代的过程。k值计算如公式3.2：<br>（3.2）<br>d值的计算过程与k值相似，d值等于当前周期的k值的三分之一与上一周期D值三分之二的和，计算公式如3.3所示：<br>（3.3）<br>最终可以根据已有的k值和d值将j值计算出来，j值等于三倍k值与两倍d值之差，计算公式如3.4所示，k、d、j三者计算出来后，随机指标的计算过程全部完成。<br>（3.4）<br>（2）macd指标，MACD指标也被称为指数平滑移动平均线。MACD是由快（周期较短）、慢（周期较长）均线组成，其中二者的分离和合拢分别表示利好利空状态。根据“惯性”，可以大致推测股价可能的变化。<br>macd的计算过程也是一个迭代的过程。第一步，计算移动平均值EMA，本周期的EMA等于上一周期的EMA与周期比值的乘积，再加上收盘价与周期的比值。计算公式如3.5所示;<br>（3.5）<br>第二步，根据计算的移动平均值，可以计算偏离值DIF，DIF等于短周期SHORT的移动平均值与长周期LONG的移动均值之差，公式如3.6所示;<br>（3.6）<br>第三步，可以根据公式3.7计算出macd的值，通过反复迭代，就可以计算出所需周期内的所有macd值。<br>（3.7）<br>（3）ma均线指标，移动平均线的应用在证券领域中是普遍的，它可以显示历史价格与当前价格的对比，投资者也因此应用ma指标来预测未来的价格变化关系。移动平均的计算方法就是，计算某日n，间隔为i的ma，就是求i周期内的收盘价格CLOSE的算术平均。公式如3.8所示。<br>（3.8）<br>（4）boll轨道指标，根据计算，确定价格的振幅范围，可视化后的形状就像一个“通道”，通过该通道可以看出股价的安全位置，也被称为布林带。它的的上界和下界不是固定不变的，而是随价格的的变化而变化。boll的计算过程也分为三步：<br>第一步，计算ma，计算公式如3.8所示，中轨道的值就等于过去n个周期的ma值；<br>第二步，计算价格与均线的标准差md，价格的值选用收盘价CLOSE代替，计算公式如3.9所示；<br>（3.9）<br>第三步，计算上下轨道线，上轨道等于中轨道与标准差的二倍之和，下轨道等于中轨道与标准差的二倍之差。<br>3.2.7 其他需求<br>3.2.2至3.2.6小节所涉及需求的对象是模型研究人员，本小节将介绍面向量化交易投资人的需求。<br>（1）自选股需求，用户可以通过搜索股票并将其添加到自选股票池中，并且可以查看股池中股票的价格波动。<br>（2）看盘需求，用户可查看到系统推荐的不同模型下的今日信号，信号内容涵盖股票号码、股票价格、股票涨幅，并且可以按照股票的涨幅排序。<br>（3）查看近期信号，投资人为进一步了解模型特点，可查看近期模型的信号，并可以查看具体股票信息，包括，分时图，新闻等。<br>3.3 非功能需求<br>除上述功能需求外，为保证系统稳定运行和用户体验，系统应有以下几方面的非功能性需求。<br>3.3.1 性能需求<br>（1）响应时间<br>对于加载任意网页界面，响应时间不会超过三秒；数据库数据更新不超过三分钟；一般查询的响应时间不超过三秒；服务器的响应时间不超过五秒。<br>（2）精度<br>输入要求：数据确保无误，符合数据输入的格式。<br>输出要求：在误差范围内，快速、准确地将数据信息打印在页面之上。<br>（3）安全保密<br>系统有严格的权限与密码设置，数据库密码做加密处理，保障用户数据的安全性和机密性。数据库采用分布式数据库，对数据进行热备份和日志存储。<br>3.3.2 稳定性需求<br>在网络状况良好和硬件环境支持时，系统满足以下要求：<br>（1）当网络出现故障或者其他外部因素，造成服务器故障时，都不会对系统数据产生负面影响或丢失；<br>（2）某一用户发生运行错误时，不会影响其他用户继续工作的事务处理机制；<br>（3）系统在运行过程中，如果产生网络故障或其它失败，则应能进行出错处理<br>（4）系统连续正常运行时间应不少于72个小时。<br>3.3.3 可扩展性<br>量化交易可视化分析系统在设计过程中，需要充分考虑模块化，考虑后期的可扩展性，通过虚拟化、接口化、模块化，在不影响系统正常使用的同时，能够快速添加新功能。另外，数据量增长迅猛，为可动态增加存储容量即保证数据库的可扩充性，应采用分布式数据库，保证数据服务器的线性可扩充。<br>3.3.4 界面需求<br>（1）界面向导性<br>界面中的文字内容，用词准确、直接、禁用陌生词，界面元素要提供充分而必要的提示，界面符合大众使用风格。&nbsp;<br>（2）界面风格<br>系统界面的整体设计，布局结构以及操作方式具有统一性，例如所有的按钮的形状、色彩以及对鼠标的响应方式都是一致的；<br>（3）分页显示<br>当数据量大的时，尽量采用分页浏览的形式。<br>（4）合理布局<br>界面的布局应当整洁，界面元素应当在水平或垂直方向对其，行列的间距保持一致。窗体的尺寸要合适，各种控件不能过分拥挤也不能过分宽松。降低人为误操作错误；减少手工输入工作量；规范基本信息的一致性。对于数值类型数据输入部分，采用可编辑的输入框，并对输入的内容进行校验，避免输入非数值数据等。<br>3.4 本章小结<br>该章节重点描述了调研得出的系统需求，说明系统用户分为模型研究人员和一般的量化投资人员。然后，详细的介绍了基本的功能需求，如查看市场行情等，最后阐述了系统非功能性需求，包括在界面上的风格要求，系统在各条件下的响应时间等。<br><br><br>4 系统架构<br>参照系统需求说明，本章节将介绍系统的功能设计，所涵盖的内容的主要是决定一个系统是否能正常运作的最重要的系统总体设计和详细设计。按照软件开发的“高内聚，低耦合”的思想，将系统整体划分为多个子模块，并对其进行一一深入的解释说明。<br>4.1 系统总体设计<br>4.1.1 系统总体划分<br>量化交易可视化分析系统分为数据管理、可视化分析两个子系统，如图4.1所示。数据管理系统是对金融数据进行管理，是系统的基础；可视化分析系统是对金融数据的应用。<br><br><br>图4.1 系统划分图<br><br>数据管理子系统负责系统的基础——数据的管理，其中数据获取又是数据管理子系统的基础，除此，面对海量金融数据，系统校验也是数据管理的一大重要模块，因此，将莫数据管理子系统划分为获取数据和校验数据两大模块，获取数据又包含基本面数据、消息面数据、数字货币、基本金融数据，其系统模块图如图4.2所示。<br><br>图4.2 数据管理子系统模块划分图<br>可视化分析子系统是对金融数据的综合应用，该子系统涵盖网站的基本功能和微信小程序的基本功能。该子系统可划分为网站功能模块和微信小程序功能模块，网站功能包括了市场行情模块、今日智选、历史记录、在线分析等模块；小程序功能模块就包含自选股、看盘、智选股三个子模块。如图4.3量化交易综合分析子系统模块图所示。<br><br>图4.3 可视化分析子系统模块划分图<br>4.1.2 体系架构<br>概括来说，系统架构包括客户端和服务器端两个方面，如图4.4所示。服务器端包含一个处理请求的服务器和一个分布式数据库，客户端包含pc端的浏览器和移动手持设备端的微信小程序。<br><br>图4.4 系统体系图<br>本系统采取该体系架设计的优势在于：<br>（1）分布式数据库，数据库的可扩充性<br>系统的数据库采用分布式结构，金融数据量庞大，随着时间的推移还在日益增长，当数据的容量到达上线时，如果是单一的数据服务器，面对内存问题将毫无办法，但采用分布性数据库就有很好的可扩充性，并且操作十分简单，只需在配置中将新的数据库添加上即可，同时可操作不会影响到原来的系统。<br>（2）系统便捷性<br>系统的通过网页可视化和微信小程序可视化，二者对使用的硬件要求简单，只需通过浏览器或者微信平台的小程序访问该系统，比如当用户在户外想要了解市场行情，通过手机浏览器或者通过微信就可以访问本系统，查看到你所需的行情信息。&nbsp;<br>4.1.3 系统运行环境<br>系统开发工具选择Python IDE PyCharm，而数据库采用非关系型数据库Mongo，数据管理子系统操作系统是Windows环境，可视化分析子系统的操作系统Ubantu。<br>4.2 系统详细设计<br>4.2.1 数据获取模块<br>数据获取模块是整个系统的基石，是系统完成的首要部分，下面将从数据源的确定、计划任务管理、日志管理、处理异构数据、多进程请求及获取数据的流程设计几个方面详细介绍本模块的设计。<br>（1）确定数据源<br>本系统数据的基本类型包括公司基本面数据、当下热门的数字货币、消息面数据、股票的五分钟数据、十五分钟数据、三十分钟数据、六十分钟数据等。<br>不同类型的数据，其数据源不尽相同，对于公司基本面而言，可通过tushare(http ://tushare.org/)获得，也可通过trade-X python插件获取，另外还能通过web抽取技术在各大财经网站上获取。对于数字货币，通过CionMarketCap（https://coinmarketcap.com/zh/）提供的免费接口获取。而消息面数据不具有任何规律，它是伴随着国家重大政策、上市公司重大事件而产生，因此只能通过web抽取技术在财经新闻网站上获取。股票的基本数据，无论五分钟还是六十分钟数据都可通过trade-X在其服务器中获取。<br>（2）计划任务<br>对于最常用的基本股票数据，它们具有一定的时间规律，例如五分钟数据，意味着只要是开盘时间，服务其会间隔五分钟更新一次最新数据，由此可见，系统也需要同步更新数据到本地数据库，所以可将获取基本数据设定成计划任务，根据其具体时间间隔，定时更新数据。由于数据管理子系统运行在windows环境下，可将windows操作系统自带的计划任务管理加以应用。例如获取五分钟数据的文件是get_min5.py，通过批处理文件min5.bat访问到get_min5.py，再将min5.bat添加到计划任务管理中，配置好运行时间，计划任务管理器就会定时执行get_min.py，也就能实现同步服务器数据。<br>（3）日志管理<br>通常情况，系统在运行环境CPU使用合理的情况下，计划任务会按照要求定时执行程序，但为防止数据获取异常，将对数据获取过程记录，例如对于A股市场，五分钟数据，每日应更新48次数据，也就是说日志中数据获取成功的记录应当具有48条，如果不对，可查看具体时间，查看其具体异常原因，就可及时修改模块功能缺陷。<br>（4）处理异构数据<br>根据市场的不同，数据可分为美股数据（美国）、港股数据（中国香港）、A股数据（中国）等。但由于金融数据具有异构性，人们又常常会将相同的策略运用到不同数据类型中做回测，例如利用A股数据建立的模型，想在美股中做尝试，看看模型在美国中是否适用，因此需要将异构的数据进行处理，转化成统一格式。<br>（5）多进程请求<br>在实盘中，模型上线后对于数据的实时性要求比较高，但数据量庞大使得数据并不能快速获取到。通过多进程请求数据可将效率成倍提升，通过增加cpu就可以容易的扩充性能，对于硬件资源也可以更好的利用。<br>（6）获取数据流程设计<br>首先将开发好的获取获取程序按照的计划管理器任务的要求添加到windows的计划任务管理器中，通过设置时间触发系统自动执行获取数据程序，以基本数据、股票实时数据、历史数据为例，模块的流程设计如图4.5所示<br><br><br>图4.5 数据获取流程设计图<br><br>4.2.2 数据校验模块<br>数据校验模块是为了解决人工无法验证数据正误的需求。 股票基本数据一般都具有时序性，这点对于验证数据具有很好的帮助，例如A市场共有3500多只股票，对五分钟数据而言，每只股票每天共有48条，所以五分钟数据每天共有超过16800条数据，因此通过两天或者多天对比，就可以知道数据量是否正确了。<br>由于每天开盘的股票只数不一定一致，也就是说每天都存在股票未开盘的情况，所有只能大致判断数据是否重复、丢失，对于个别股票数据出现异常，系统通常可以接受。数据检验的整体流程是，首先通过查询数据表查看近20天的数据数量，通过可视化，使用直方图显示出近20天数据量，即可通过对比分析出数据是否异常。这种数据分析方法得出的结果一定精确，但能够在较短时间内判断数据大体是否正常。<br>4.2.3 查看市场行情模块<br>市场行情的模块按照其需求，旨在了解大盘信息，与其他看盘软件不同，该模块会统计更多指标便于用户对行情的参考。该模块的过程设计如图4.6所示。下文将说明各个过程的设计。<br><br><br>图4.6 市场行情过程图<br><br>（1）登录验证<br>用户发起请求后，系统验证是否登录，如果登录，显示用户信息，用户可进行操作，若未登录，需用户输入的用户名和密码，在匹配成功后登录系统。<br>（2）计算实时指数涨幅和查询实时成交额<br>大盘指数的实时指数涨幅和实时成交额往往是能反应整个市场的大体行情的，一般而言，指数的涨幅较好，大多个股的表现就很好。指数的涨幅是用指数的现价除以开盘价再减一，因此对于计算指数的涨幅是获取到实时的现价和开盘价，能够从新浪接口（http://hq.sinajs.cn/list=sh000001）获取到实时数据，该url返回结果是一串文本，通过字符处理，将其转为方便处理的列表，最终现价和开盘价得到，成交额也在其中，因此指数涨幅和实时成交额得以获取获取。<br>（3）获取历史数据，并可视化k线图<br>根据日期等条件查询数据库获取到基本数据，数据包括最高价、最低价、开盘价、收盘价、成交额，k线图的可视化另外还需要ma5、ma10、ma20、ma30。因此还需要计算将该系列指标计算出来，ma的计算在上文中也提到，在此不做累述，数据准备已经完成，接下来就是对数据进行可视化的过程，本模块在前段可视化，并使用前端可视化框架Echarts。<br>（4）分析个股数据，统计大盘综合指标，并将指标可视化<br>大盘的综合指标包括有个股涨跌幅统计、次新涨跌幅统计、换手率统计、最小市值统计、10日站上站下统计、20日站上站下统计、放量上涨下跌统计、行业板块统计。<br>所以，首先需要分析所有个股数据，统计得出所有的综合指标。通过查询出当日所有个股信息，按照各个指标的计算方法将求得所需指标数据，在数据求得后，与k线可视化相同，借助Echart进行可视化。<br>（5）分析行情，推荐风险指数和建议仓位<br>假设各大盘数据都是影响行情的相关指标设各影响因子为w，使用历史数据测出各参数的近似值并保存，当统计得到大盘综合指标后，通过各参数计算出各风险系数和建议仓位。<br>4.2.4 监督策略运行模块<br>监督策略是对信号的查询、计算并对其可视化的过程，如图4.7所示。<br><br>图4.7 监督策略运行过程设计图<br>（1）获取近期信号并计算相关数据<br>从信号表中读取到数据，同时我们需要对信号的实时收益进行了解。信号表具有股票号、建仓价格、建仓时间，信号推荐指数，如果该信号已经平仓，它具有平仓价格和平仓时间，显然并没有直接实时收益，因此需要计算出收益，收益的计算需要现价，上文提到新浪接口可获取到实时价格，因此获取到基本数据后，就能将所需的数据计算出来。<br>（2）获取并计算K线数据<br>和市场模块的k线数据处理过程相似。将数据从数据库中读取出来，计算ma等数据后，与它不同的是，在前端通过事件与相关信号绑定，通过监听不同信号的绑定事件，加载不同的K线图。例如，当点击曲速一号的信号300059，该信号是基于30分钟的建立的模型，所以k线加载的数据也是30分钟数据，如果点击的是曲速二号的002408信号，该模型是基于60分钟数据建模的，那么该部分请求的K线数据是60分钟数据。<br>4.2.5 查看历史记录模块<br>历史记录的实现过程与今日智选的同步完成的，历史记的本质录是将今日智选的结果集统计、计算、可视化的过程，其过程设计如图4.8所示。这样设计的目的避免系统在瞬间的计算任务到达峰值，将任务分解，逐步将计算子任务完成并保存，当页面请求时，只进行部分简单运算。<br><br><br>图4.8 历史记录模块过程设计图<br><br>（1）统计日收益<br>统计日收益的目的是便于后续计算年收益，日收益是在每日信号的的止盈止损后，将数据统计、计算后存到日收益表中，供系统使用。<br>（2）计算参数<br>根据策略在模拟盘中的表现情况，计算参数信息比率、波动率、年化收益、胜率，sharp值，并统计交易次数、日均信号量等参数，通过这些参数，投资者可对该模型做出判断，例如sharp大于零，说明该策略获得的报酬高过风险，这个值越高，说明投资组合越佳。<br>4.2.6 在线分析模块<br>在线分析模块包括板块跟踪分析、搜索对比分析、多角度综合分析，因为这些板块的核心要点就是数据可视化，因此，将它们放在同一个模块下。系统整个可视化分为网页前端可视化、微信小程序可视化、matplotlib可视化。本小节着重阐述可视化技术的大体过程。<br>（1）数据准备<br>可视化的前提是数据，微信小程序的数据来源是通过接口，网站的数据来源也是通过接口，可视化分析子系统下的所有功能模块的数据来源有两种，一种是数据库，根据接口对数据的要求，在数据库中查找对应数据，另一种是python和Excel通用的csv文件，并且该文件能够和python的pandas互相转化。<br>（2）数据的计算<br>金融数据数据的计算过程比较复杂，需要根据其计算公式将最终数据计算出来，对于网站而言，为减轻服务器的压力，尽量后台服务器只做数据查询，而数据的处理，计算以及可视化将分担到浏览器来完成。<br>（3）数据可视化<br>本系统前端可视化均采用Echarts。Echarts的操作简便，根据option的配置方法，将基本数据处理后，按照所需样式，配置option，通过驱动方法将图像渲染呈现在用户眼前。系统的可视化还采用python的matplotlib，matplotlib提供了大量方法，例如画散点，plt.scatter([5，4，7，2，4，5]，[9，6，7，4，2，8])，代码只需要一行即可，其结果如图4.9所示。<br><br>图4.9 matplotlib绘图实例<br>对于系统最常用的的绘制k线图，如图4.10所示，k线分为阴线和阳线，图4.10左是阳线表示收盘价大于开盘价，右表示阴线收盘价小于开盘价。matplotlib可通过candlestick_ohlc(ax，data，width=w，colorup='red'，colordown='green')将K线图可视化呈现。<br><br>图4.10 k线图<br>4.2.7 其他模块<br>根据需求，其他模块涵盖了自选股、看盘和查看近期信号三个部分，由于本模块下所需的后台数据的分析处理包括数据的CURD，与查看市场行情、监督策略运行、查看历史记录相同。<br>4.3 本章小结<br>本章从系统整体出发，系统整体分为数据管理、可视化分析两个子系统，从技术的实现角度对系统各个模块进行设计。<br><br><br>5 系统实现<br>本章将围绕系统的设计的内容，按照其划分板块，将其一一编码实现，并展示其主要的代码和具体实现结果的截图。<br>5.1 数据获取<br>对于互联网上的海量的数据，通过web获取技术，让其为之所用，但是对于金融数据的获取并不容易，服务商往往会使用一些反爬技术，防止通过web抽取技术进行数据提取。在选择好目标网页后，最重要的是将于我们有利的信息从中分离出来，并内容保存到数据库中。其基本操作流程如图5.1所示。<br><br><br>图5.1 web抽取实现过程<br>（1）建立url队列<br>想从web中获得有用的数据必定不简单，因为往往一个地址并不能得到想要的全部内容。在人工选择方面，在仔细分析URL的组成机构，判断是否有逻辑存在，发现其规律后制定逻辑URL。以消息面的数据为例，我们寻找到同花顺财经网的报刊头条，它的url是http://stockpage.10jqka.com.cn/20180517/，可以很明显发现该URL就是由域名加上日期组成，通过程序生成url列表，经请求、解压、解码数据后，如果可以得到新的URL，并将其加入到url队列中，开始下一轮的获取数据。<br>（2）发起http请求<br>采用urllib.request库，requests是一个很实用的Python HTTP客户端库勇气向目标url发起get请求，请求的代码如下所示，并且报出“HTTP Error 403”错误。<br>def get_web_data(cls,url):<br>try:<br>data=urllib.request.urlretrieve(url)<br>return data<br>except:<br>print(“失败”)<br>通过开发者工具分析发现，在浏览器中请求时，其请求头内容在上述请求过程并没有，在程序中，发起get 请求时，虽然与目标建立了连接，但目标做了反爬应对，因此获取不到结果。在程序请求时，应当模拟浏览器向目标发起请求，才能将内容获取到。在程序中添加请求头，代码如图所示。从新发起http请求，内容成功获取。<br>def get_web_data_add_head(cls,url):<br>try:<br>request=urllib.request.Request(url)<br>print(url)<br>headers = {\"User-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:36.0) Gecko/20100101 Firefox/36.0\",<br>\"Referer\":\" http://stock.10.jqa.com.cn\",<br>\"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"，<br>\"Accept-Language\": \"en-US,en;q=0.5\",<br>\"Connection\": \"keep-alive\",<br>\"Content-Type\": \"application/x-www-form-urlencoded\"，<br>}<br>for ihead in headers:<br>request.add_header(ihead,headers[ihead])<br>data=urllib.request.urlopen(url).read()<br>return data<br>except:<br>print('失败')<br>（3）解压、编码和内容提取<br>查看返回内容发现内容全是乱码，根据编码规则，运行环境的字符编码和网页的字符编码不一致会出现乱码，通过开发者工具发现内容的编码为gzip，为了将内容解压，我们引入BeautifulSoup，它是Python的一个库，最主要的功能就是BeautifulSoup将html解析为对象进行处理，全部页面转变为字典或者数组。<br>为了减少系统工作的负担，通过正则表达可明显提高系统效率，以要获取新的url为例，首先通过开发者工具查看html的结构，确定目标就是由域名与日期、一串随机码组成的，例如href=http://stock.10jqka.com.cn/20180424/c604093608.shtml，确定模块，并通过正则表达式匹配目标url，匹配结果就是url列表，获取到url集之后，相原理，可以从这些url中获取目标内容，直到抽取出我们最终的目标为止。<br>def re_patter(self,html):<br>html=str(html).replace(' ','') s=r'href=\"http://stockpage.10.jqka.com.cn/(.*?)\"target=\"_blank\"&gt;\\d+'<br>pat=re.compile(s)<br>data=pat.findall(html)<br>return data<br>（4）数据存储<br>根据金融数据的特性，又因为该系统更加“重视”读数据，因此数据库选用读取效率极高的非关系型数据库MongoDB，为保证数据库的可靠性和鲁棒性，基于MongoDB的功能特性，系统搭建一套分布式数据存储模式——MongoDB复制集模式。<br>概括地说，复制集就是由同一节点的多个镜像组成，包含一个主节点（primary）和至少两个从节点（Secondary），如图5.2所示。对用户而言，只需将要保存的数据写入主节点中，从节点会自动从主节点中同步数据，始终保持所有节点的数据均一致，从而提高的数据库的可靠性。&nbsp;<br><br><br>图5.2 Mongo复制集结构图<br><br>各个节点数据同步过程如图5.3所示。主节点和各从节点之间是通过oplog来实现通信的。当主节点的写入操作完成时，主节点会向事先约定的据点写入oplog，即本次写数据的记录，各个从节点会定时的获取或者更新oplog记录，并根据oplog，执行应有操作。oplog具有幂等级，以防止从节点从主节点中读取到重复的记录。另外，会设定oplog容量的最大值，当oplog的存储空间达到该值，会将其所有记录删除，达到清理空间的目的。主节点发生故障，若有数据未能同步到从节点中，会从新通过选举的形式产生新的主节点，当故障节点加入集群中时，它有可能已经不再是主节点，其他节点仍旧能从oplog记录中完成之前未完成的同步。&nbsp;<br><br><br>图5.3 oplog同步原理示意图<br><br>复制集的实现首先需要初始化，通过rs.initiate(id,host)，通过id和host设定主节点名称和主节点的网络通信地址。通过status()可查看节点的状态，通过add()即可一一的将从节点加入的集群中。通过上述几个命令即可配置一个复制集，另外，需要配置其他参数还可以通过rs.reconfig()配置。<br>5.2 数据分析<br>分析工具：Python的解释器为了抽离底层用到的计算元素做了很多工作，这让编程人员无须考虑如何为数组分配内存、如何组织内存以及用什么样的顺序将内存传入CPU。这是Python的一个优势，让你能够集中在算法的实现上。然而它有一个巨大的性能代价，python在近年的受欢迎程度是扶摇直上，正是得益于python在数据分析处理方面的强大功力，numpy和pandas库提供大量的分析处理方法，在本系统的实现中也大量使用到该库，在处理百万级数据时，系统处理数据具有明显效果。Numexpr是numpy的豪华升级版，它利用多线程技术将所有内核利用起，因此它的速度会比numpy更快。<br>数据计算：首先从数据库中读数据，读取方法是def get_stock_data(cls,stock_code=''，start_date='',end_date='',strategy='',**kw)，该函数根据日期范围、股票代码、表名从数据库中读到某只股票的数据，根据参数的不同可以读取各种股票，不同日期，不同类型的数据。将数据转化成pandas的Dataframe，即完成了数据的准备阶段，转化的操作是data = pd.DataFrame(stock_data)。<br>数据处理常常包括，排序，计算，合并，分组计算等，这些操作对于不断通过迭代或者递归来做，将会耗费大量的时间和资源，但是通过，pandas能在数秒内完成。<br>下面我将通过实例证明系统的分析处理能力，现某模型模型研究员在观察历史k线图后，大胆推测，第二日的涨幅与60日均线、20日均线、10日均线、5日均线、20日均线的斜率、缩放量密切相关。<br>第一步，数据准备，将需要的数据从数据库中读取出来和计算出来，代码如下所示，所需结果全部保存在一个Dataframe中，另外还需将未做任何处理下的涨跌计算出来供后续验证部分对比。<br>def deal_data(data)<br>data['close2'] = data.close.shift(-1)<br>data['profit'] = (data.close2 - data.close) / data.close * 100<br>data['pre_volume'] = data.volume.shift(1)<br>data['ma20'] = pd.rolling_mean(data.close， 20)<br>data['ma5'] = pd.rolling_mean(data.close， 5)<br>data['ma10'] = pd.rolling_mean(data.close， 10)<br>data['ma60'] = pd.rolling_mean(data.close， 60)<br>data['lastma20'] = data.ma20.shift(1)<br>data['lastma10'] = data.ma10.shift(1)<br>data['lastma5'] = data.ma5.shift(1)<br>data['alp'] = data.ma20 / data.lastma20 - 1<br>data['ma10_alp'] = data.ma10 / data.lastma10 - 1<br>data['ma5_alp'] = data.ma5 / data.lastma5 - 1<br>data['fl'] = data.volume / data.pre_volume<br>return data<br><br>第二步，对参数进行逐一验证，如验证20日均线的斜率，设定一个验证范围，如果在此范围有alp的值相较于第一部中的涨跌有所提高，则认为此参数有效，代码如下：<br>import numpy as np<br>mark = {'max': 0, 'num': 0}<br>start=-0.02<br>end=0.030<br>detal=0.001<br>length=200<br>for parm1 in np.arange(start, end, detal):&nbsp;<br>for parm2 in np.arange(start, end, detal):<br>data1 = data[(data.alp &gt;= parm1) &amp; (data.pre_alp &lt;= parm2)]<br>if len(data1) &gt; length:&nbsp;<br>if (len(data1[data1.profit &gt; 0]) / len(data1)) &gt; mark['max']:<br>mark['num'] = len(data1)<br>mark['parm1'] = parm1<br>mark['parm2'] = parm2<br>mark['max'] = max(mark['max']， len(data1[data1.profit &gt; 0]) / len(data1))<br>第三步，在确定所有参数后，整理结果，建立好模型，进行历史数据回测，回测的方法是用建立的模型去选点，这些点被称为“买点”，在这个时刻买入后根据持仓规则，在合适的时候卖出并计算统计收益率，最终的得出在历史行情中，该模型是否有效，如果有效，将该模型部署的系统中，模拟试运行一段时间，再将其运用到实盘中。如果最终该模型却有成效，可将这些买点可视化出来，一方面可以便于验证这些“买点”是否正确，另一方面可将这些可视化结果用于机器学习，通过训练机器学习模型来追求绝对收益。<br>5.3 市场行情<br>查看市场行情页面是系统的首页，进入首页，系统首先发起登录验证，验证页面如图5.4所示，系统成功登录后，可正常使用系统功能。<br><br><br>图5.4 登录页面图<br><br>市场板块的特点的就是数据量庞大，为防止客户端不断请求加重服务器负担，浏览器的本地存储功能正好可以解决这点，通过javaScript代码localStorage.setItem(name，data)将key(关键字)为name，value(值)为data的数据保存在本地localStorage中，如题5.5所示，在用户重新请求数据时，使用javascript代码data=localStoryget.getItem(name)获取data。<br><br><br>图5.5 localStory存储图<br><br>该模块按照系统设计的要求，通过数据请求、计算处理数据后，得到最终结果，如图5.6所示。<br><br><br>图5.6 市场行情实现结果图<br>5.4 模型监督<br>实时获取计算涨幅是模型监督模块的功能之一，该功能采用Ajax技术向服务器发起请求，计算数据后更新页面数据，实现不跳转刷新页面。具体实现按照系统设计实现，该web页面实现分页加载，最终实现结果如图5.7所示。<br><br><br>图5.7 今日智选实现结果图<br><br>5.5 查看历史记录<br>历史记录的功能页面的实现更多是后台数据的计算和处理，通过ajax获取数据后，在前端采用Echarts可视化，并绑定年收益与交易记录，通过点击年收益的面积图，可查看对应日期的交易记录。最终实现结果如图5.8所示。<br><br><br>图5.8 历史记录实现结果图<br>5.6 在线分析<br>板块跟踪分析数据计算量大，根据降低服务器压力的原则，服务器只做数据查询并返回结果，数据的计算在前端完成。另外价格加速度的计算也在前端完成，此操作放到前端后，并不会影响用户的体验，反而对系统整体的性能提升有很大帮助。具体代码实现如下：<br>var increase=0;<br>var decrease=0;<br>var no_change=0;<br>for(var i in data){<br>var close = data[i].close;<br>time = JSON.parse(data[i].time);<br>var open = data[i].open;<br>var stock = data[i].stock;<br>var profit =[];<br>var mark=-1;<br>for(var j=0;j if(time[j] == t){<br>mark = j;}}<br>for(var k in close){<br>if(k==0){<br>profit.push((close[k]/open-1)*100);<br>}else{<br>profit.push((close[k]/close[k-1]-1)*100);<br>}}<br>if(profit[mark] &gt;0){<br>increase++;<br>}else if(profit[mark]==0){<br>no_change++;<br>}else{<br>decrease++;}<br>y.push(profit[mark]);<br>s.push(stock);<br>本页面也存在数据重复加载的可能，但由于数据更新周期较短，采用sessionStory将数据存储到session（会话）中。通过各功能的实现，最终该页面成功完成，其结果如图5.9所示。<br><br><br>图5.9 历史跟踪分析实现结果图<br><br>搜索对比分析的具体实现就是数据库的多条件查询的实现，系统在数据管理子系统中实现了CRUD，因此对于该部分的实现比较简单，最终实现结果如图5.10所示，下列是实现多条件查询的主要代码。<br>kline = strategy.split('_')[1]<br>if kline[0:3] == 'day'or kline[0:4] == 'XDXR': # 包括day day_XDXR day_index&nbsp;<br>cursor = model_list[strategy].query(sql)<br>stock_data = list(cursor)<br>if len(stock_data) &gt; 0:<br>data = pd.DataFrame(stock_data)<br>data['date'] = pd.to_datetime(data.date)<br>data = data.sort_values(['date']， ascending=False)<br>data = data.reset_index(drop=True)<br>return data<br>if kline[0:3] == 'min':<br>cursor = model_list[strategy].query(sql)<br>stock_data = list(cursor)<br>if len(stock_data) &gt; 0:<br>data = pd.DataFrame(stock_data)<br>data = data.sort_values(['date'], ascending=False)<br>data = data.reset_index(drop=True)<br>return data<br>return pd.DataFrame([])<br><br><br>图5.10 搜索对比分析实现结果图<br><br>多角度综合分析采用ajax技术结合Echarts可视化技术，使得页面“运动”起来，实现了用户从价格波动、价格变化波动、收益率的变化幅度等不同角度通过散点图、柱状图、折线图等形式分析观察数据的可能。结果实现如图5.11所示，实现的部分代码如下。<br>data=JSON.parse(data);<br>for(key in data){<br>var a=data[key];<br>list.push(a[31]);<br>price_key.push(key);<br>x=(a[3]/a[1]-1)*100;<br>var temp =[];<br>if(price_line_data[key]==undefined||price_line_data[key]==''){<br>temp.push(x);<br>price_line_data[key]=temp;<br>}else{<br>temp=price_line_data[key];<br>temp.push(x);<br>price_line_data[key]=temp;<br>}}<br><br>图5.11 多角度综合分析实现结果图<br><br>5.7 可视化验证<br>通过可视化验证“买点”可提高建模效率，图5.12就是可视化验证的结果，图像为k线图，横坐标是具体日期，标签是由股票号、日期、收益组成，图像结合标签可以轻松验证自己的“选点”是否正确，也可很明显知道收益情况。主要实现代码：<br>fig， ax = plt.subplots()<br>data0['first_high']=data[data.date==data0.first_date].high.iloc[0]<br>data0['second_high']=data[data.date==data0.second_date].high.iloc[0]<br>x=[0，data0.second_num-data0.first_num]<br>y=[data0.first_high，data0.second_high]<br>z_=[data0.second_num-data0.first_num，(len(data)-1)]<br>z=[data0.second_high,ata0.k*((len(data)-1)-(data0.second_num-data0.first_num))+data0.second_high]<br>plt.plot(x，y)<br>plt.plot(z_，z)<br>plt.axvline(data0.num-data0.first_num)<br>candlestick2_ohlc(ax,data.open,data.high,data.low,data.close,width=width,up='red' colordown='green')<br>date1=list(data.date)<br>date=list()<br>des=[data0.first_date,ata0.second_date,ata0.close_date]<br>for i in range(len(date1)):<br>if date1[i] in des:<br>date.append(str(date1[i])[5:10])<br>else:<br>date.append('')<br>x=np.arange(0,en(data)，1)<br>plt.xticks(x)<br>title=data0.code+'_'+str(data0.first_date)[0:10]+'_'+str(data0.k)<br>plt.setp(ax，xticklabels=date)<br>path = 'F:\\zjf\\images\\wave_4_18_p2'+'\\\\'+mark+'\\\\'+filename<br>File.check_file(path=path)<br>file_name = path + '/' + title + '.png'<br>plt.grid(False)<br>plt.savefig(fname=file_name,format='png')<br><br><br>图5.12 可视化验证图<br>5.7 技术指标可视化<br>技术指标的可视化过程分为三步，第一步是从数据库中读取相应的数据；第二步是通过这些数据按照数学公式计算出指标数据；第三步是将这些指标数据通过可视化技术表示出来并将图片保存。可视化指数指标有kdj、macd、boll等，图5.13、5.14、5.15是可视化的实现结果。该模块的核心代码如下：<br>def lm_kdj(cls,df, n,om,ksgn='close'):<br>lowList= pd.rolling_min(df['low'], n)<br>lowList.fillna(value=pd.expanding_min(df['low']),inplace=True)<br>highList = pd.rolling_max(df['high'],n)<br>highList.fillna(value=pd.expanding_max(df['high']),inplace=True)<br>rsv = (df[ksgn] - lowList) / (highList - lowList) * 100<br>df['kdj_k'] = pd.ewma(rsv,om=com)<br>df['kdj_d'] = pd.ewma(df['kdj_k'],com=com)<br>df['kdj_j'] = 3.0 * df['kdj_k'] - 2.0 * df['kdj_d']<br>df.fillna(0,inplace=True)<br>return df<br>def cal_macd(cls,data,short=12,long=26,mid=9):<br>data = data[::-1]<br>data = data.reset_index()<br>data['sema'] = pd.ewma(data.close,span=short)<br>data['lema'] = pd.ewma(data.close,span=long)<br>data.fillna(0,inplace=True)<br>data['dif'] = data['sema'] - data['lema']<br>data['dea'] = pd.ewma(data['dif']， span=mid)<br>data['macd'] = 2 * (data['dif'] - data['dea'])<br>data.fillna(0,inplace=True)<br>data = data[::-1]<br>return data<br><br>图5.13 kdj指标<br><br>图5.14 macd指标<br><br>图5.15 boll指标图<br>5.8 其他模块的实现<br>（1）自选股<br>自选股模块实现了用户能够自己搜索并添加到自选股池中，从而方便对这些股票进行了解，通过wxml和wxss的编写，最终该模块的实现如图5.16所示。其实现的部分代码如下：<br>onAddOrDelStock: function (e) {<br>console.log(\"onAddOrDelStock\",e)<br>var that = this<br>var stocks = that.data.stockArray<br>that.data.stockArray = []<br>that.setData(that.data)<br>var stock = stocks[e.currentTarget.id]<br>stock.setOptional(!stock.optional)<br>that.data.stockArray = stocks<br>that.setData(that.data)<br>Api.stock.commitOptionals({<br>goodsId: stock.goodsId<br>).then(function (res) {<br>console.log(\"添加自选股\", res)<br>)}<br><br>图5.16 小程序自选股界面<br><br>（2） 看盘<br>看盘模块包括热门板块和近期推荐信号，看盘页面图5.17，上半部分为热门板块即板块中表现强势的股票，下半部分是近期推荐信号，投资者可以了解该模型是否值得投资，通过点击股票，还可以查看股票详情。主要实现代码：<br>//看盘<br>function getKanPan({ secucategory, uid } = {}) {<br>var promise = Service.requestOfTag({<br>showLoading: false,<br>showFailMsg: false,<br>method: 'POST',<br>data: {<br>secucategory: secucategory,<br>uid: uid,}，<br>url:'http://123.234.5.140:8880/get_small_pro',<br>},secucategory).then(function (res) {<br>console.log(\"kp:\",res)<br>if (res.res_data.statusCode == 200 &amp;&amp; res.res_data.data.result.code == 0) {<br>var results = parser.parseKanpanData(res.res_data.data.detail);<br>return { category: res.res_tag,data: results }<br>} else {<br>return Promise.reject(StaticStrings.kGetDataErrorInfo)<br>}}, function (res) {<br>return Promise.reject(StaticStrings.kGetDataErrorInfo)<br>});<br>return promise;}<br><br><br>图 5.17 小程序看盘界面<br>(3)查看近期选股<br>查看近期选股是小程序的重要部分，投资者可通过其选择信号做投资。图5.18是智能选股的实现界面。该模块也分为两部分，一部分是大盘信息，即风险指数、建议仓位及大盘月涨幅，用户通过了解这些信息对大盘有整体了解。图中时间为21:28属于收盘时间，因此数据并未显示；另一部分是系统向用户推荐的股票，用户可查看各个模型的近期的表现，从而作出是否投资的判断。核心代码如下：<br>getData: function () {<br>var that = this<br>Api.haogu.getHaoguList({<br>listType: []<br>}).then(function (results) {<br>wx.stopPullDownRefresh()<br>that.data.array = results;<br>that.setData(that.data)<br>}， function (res) {<br>wx.stopPullDownRefresh()<br>})<br>wx.request({<br>url: 'http://123.234.5.140:8880/request_profits_risk_and_position',<br>// url: 'http://127.0.0.1:80/request_profits_risk_and_position',<br>success: function (res) {<br>console.log(res)<br>hat.setData(<br>tjArr:res.data<br>})<br>}<br>})<br><br><br>图5.18 智能选股界面<br><br>5.9 本章小结<br>本章详细说明了各个模块的实现过程，并附上了实现的部分主要代码，并展示了各个页面的实现结果的截图。<br><br>6 测试<br>测试阶段是对系统的检验，本章节将介绍在系统测试阶段所采用的测试用例，并根据测试情况对整个系统做整体性评价。<br><br>6.1 测试用例<br>（1）登录验证测试用例，如表6.1所示。<br><br>表6.1 登录验证测试用例<br>功能点 前置条件 输入 预期结果<br>登录成功 进入登录界面 用户名：zjf 密码：zjf123 登录成功，进入主界面<br>格式错误 进入登录页面 用户名：空 提示用户名格式错误<br>密码错误 输入验证通过 用户名：zjf 密码：zjf000 提示密码错误，登录失败<br><br><br>（2）查看市场行情测试用例，如表6.2所示。<br><br>表6.2 市场行情测试用例<br>功能点 前置条件 操作步骤 预期结果<br>图像绑定 进入市场行情页面 点击k线 指标图形更新、风险指数更新<br>搜素股票 进入市场行情页面 1.输入正确的股票号 2.脱离输入框焦点 K线更新<br><br><br><br>（3）监督模型测试用例，如表6.3所示。<br><br>表6.3 监督模型测试用例<br>功能点 前置条件 操作步骤 预期结果<br>图像绑定 进入监督模型页面 点击股票信息 K线更新<br>查看各模型 进入监督模型页面 点击tab(曲速二号) 表格刷新、k线刷新<br>分页显示 进入监督模型页面 点击下一页 表格数据刷新<br><br><br><br>（4）查看历史记录测试用例，如表6.4所示。<br>表6.4 查看历史记录测试用例<br>功能点 前置条件 操作步骤 预期结果<br>分页显示 查看历史记录页面 点击下一页 表格数据刷新<br>图-表绑定 查看历史记录页面 点击收益曲线图 交易记录表格刷新<br>查看实盘交易历史 查看历史记录页面 点击tab（交易历史） 表格数据刷新<br><br><br><br>（5）在线分析测试用，例如表6.5所示。<br>表6.5 查看历史记录测试用例<br>功能点 前置条件 操作步骤 预期结果<br>绑定图像 进入跟踪分析页面 点击板块走势图 涨幅统计图变化<br>搜索 进入搜素对比分析页面 1，选中kline、min60 2，输入股票列表（000001,000232） 3，输入日期20180525，20180524 绘制对应的k线<br><br><br><br>续表6.5 查看历史记录测试用例<br>功能点 前置条件 操作步骤 预期结果<br>多角度分析 进入多角度分析页面 无 各指标图动态变化<br><br><br>6.2 系统评价<br>通过对量化交易可视化分析进行测试，可以了解到系统整体满足用户需求，且完整的实现了系统的功能和业务逻辑。对于系统前端而言，系统界面美观，风格统一，向导性强，操作简单便捷；对于后台各功能的逻辑实现，通过测试，其基本的CURD的实现准确无误，并且耗时较短。将各子系统部署后，系统运行稳定，子系统间衔接良好。综上，该系统实现了系统开发的预期目标。<br><br><br>总 结<br>从项目的需求调研到系统的架构的设计，再到将系统模块后的详细设计，最终将量化交易可视化分析系统具体实现，通过测试，系统已基本达到预期目标，并且将系统部署的某公司内网中试运行，系统反馈良好，现已协助完成两个模型的建立。<br>本系统主要面向模型研究人员和量化投资人，根据用户需求不同，系统设计了不同模式，对于量化模型研究人员，考虑到图像渲染、使用便捷等问题，系统实现的载体采用的是网站，对于一般的不具备模型研发能力的投资人，系统实现的载体是微信小程序。<br>本系统的实现采用了pandas、numpy的数据分析库，因此，系统在面对百万级数据分析处理时，也只在数秒内完成，系统大脑数据库采用Mongo，并配置了其复制集模式，使之成为能够数据热备份且能负载均衡的分布式数据库。系统的所需数据是从各大开源接口获取和通过网页抽取技术从各大财经网站中抽取。<br>系统的创新点有两点，第一，统计分析个股数据形成新的指标，如站上20只数，再结合大盘基本数据对行情进行综合判断；第二，将金融数据以不同形式可视化，使得用户可以从不同视角分析数据。<br>当然，系统仍然存在不足和待改善之处，虽然系统数据库采用分布式结构，但系统服务器是单点模式，在系统运行的可靠性和性能上还存在不足；功能上也还存在待完善之处，例如在综合分析页面中，用户不可以自定义条件，所设条件均是系统设定；另外，在界面的设计和布局上存在很多瑕疵，导致界面整洁度有所不足。<br><br>致 谢<br>岁月如歌，短暂而欢愉。四年重庆交通大学时光如白驹过隙，接近尾声。回想这即将告别的大学生涯，有太多收获，太多感恩。老师们的谆谆教导、同学们的如火激情都无时无刻不在激励我要砥砺前行。<br>首先，我要感谢论文指导老师李韧博士。李老师对我论文的研究方向提出了许多建设性的意见，在论文撰写过程中对我遇到的困难和疑惑给予悉心指点，让我能够及时发现问题并改善论文内容。在此，对李老师的关怀和帮助表示诚挚的谢意!<br>其次，衷心感谢隆讯科技集团首席信息官李牧博士。李博士对我的项目提出了很多宝贵意见。他所指出的每一个问题，指导的每一个思路，都使我受益良多。<br>再次，感谢室友。四年来大家互相学习，互帮互助，共同度过了一段难忘的时光，尤其在论文编写中给了我大力支持。<br>此外，由衷感谢梁健同学，在无数次论文交流和关于人生的探讨中，给予了我很多启发性的思考。<br>最后，特别感谢硕士生学姐冉宇。冉宇学姐在我编写论文期间给予我极大的精神鼓励，以及在写作规范上的指导。<br>谨以此篇，纪念我即将逝去的大学时光！<br><br><br><br><br>参考文献<br>扈香梅.浅谈基本面分析和技术分析在股票市场的应用[J].新西部,2014,(5):62-62.&nbsp;<br>潘衍天.简论中国A股当前局势及未来走势[J].金融经济,2015,(8):36-38.<br>罗欣.基于商业模式视角的互联网金融创新研究[D].四川:西南财经大学,2014.<br>邹振华.基于文本挖掘量化投资系统[D].广东:华南理工大学,2013.<br>余春.基于数据挖掘技术的金融数据分析系统设计与实现[D].四川:电子科技大学,2014.<br>朱臻.矢量场可视化概述与展望[J].信息技术与信息化,2015,（2）:143-144.<br>荣光.数字可视化背景下的视觉设计元素的研究[D].陕西:西北大学,2014.<br>黄文斌.计算机图形学的应用领域研究[J].科技展望,2017,（2）:27-27.<br>龚炳江，刘婧.虚拟现实可视化技术研究[J].科研,2015,（14）:9-9.<br>李治.基于趋势理论的量化交易策略在外汇市场的应用研究[D].江苏:南京大学,2016.<br>陈琰.基于Radviz算法的金融数据可视化分析技术研究[D].浙江:浙江大学,2014.<br>繁妮.美国证券网上交易的发展[J].金融电子化,2001,(1):63:64.<br>FP Miller,AF Vandome,J Mcbrewster,Charles,Schwab.Charles Schwab Corporation[M] Saarbruecken: Alphascript Publishing,2017.<br>张小斐.全球主要交易所业务发展模式研究[R].上海:上海证券交易所,2015.<br>刘昊.国内外股票市场联动性研究[D].北京:首都经济贸易大学,2017.<br>Kwan Hee Han.Jun Woo Park,Process-centered knowledge model and enterprise<br>ontology for the development of knowledge management system [J],Expert Systems<br>with Applications,2011,5:7441-7447.<br>彭陈倩，张先.韩国互联网证券对中国的启示[J].财讯,2016,(8):50:51.<br>李凌志.张玉婷,基于本体的信息集成研究[J],情报杂志,2008,(1):68:71.<br>Kushmerickn,Wrapper induction:efficiency and expressiveness[J],Artificial IntelligenceJourna1,2010,118:15-68.<br>龚新定,余艳梅,吴小强,何小海.基于Django的实验室信息管理系统设计[J],2016,(35):108-111.<br>翁立林.商品搜索引擎产品排序模块的设计与实现[D].江苏:南京大学,2012.<br>O'Reilly Media,Inc.MongoDB:The Definitive Guide[M]. O'Reilly Media,Inc,2013.&nbsp;<br>D Crane，E Pascarello,D James. Ajax in Action[M].Manning Publications Co,2005.&nbsp;<br>王子毅,张春海.基于ECharts的数据可视化分析组件设计实现[J].微型机与应用,2016,35:46-48 .<br>陈福多.基于TDLAS二维温度场分布反演软件设计[D].安徽:中国科学技术大学,2016.<br>FabioNelli，内利，杜春晓.Python数据分析实战[M].人民邮电出版社,2016.<br>郑宏韬.KDJ指标在证券投资分析中的应用[J].中国证券期货,2012,（7）:14-14 .<br>曹誉波.MACD指标在证券投资中运用[J].经营者管理，2010,（4）:166-167 .<br>高晓玲.BOLL技术指标的统计分析与改进[D].四川:西南交通大学,2010.<br>农玲.使用MA与MACD指标构建趋势性程序化交易模型的运用及测试结果分析[J].经济,2016,(5):297-298<br>胡明迪,赵永进,申长安,宋小鹏. 基于ID3算法的股票指标选择[J].福建电脑,2014,(1):6-7.<br>2<br>–20–<br>&nbsp;</p>")

    layui.use(['element','layer'], function(){
        var element = layui.element; //导航的hover效果、二级菜单等功能，需要依赖element模块
        var layer = layui.layer;
    });
    labelNameRender();
    loadDoc();
    if(operation==="read"){
        editor.isReadOnly = true;
    }

});
function labelNameClick(name,color) {
    var rgb=hexToRgb(color);
    change(rgb);
    editor.editing.view.focus();
    boldSelection(name);

}

//加载标签
function labelNameRender() {
    if(pageType==='personalAcceptNotFinishPage'
        || pageType==='personalAcceptFinishPage'
    ){
        labelName = JSON.parse(window.sessionStorage.getItem(acceptId + 'labelName'));
    }else if(pageType==='otherReleasePage'
        || pageType==='personalReleasePage'
        || pageType==='labelExamplePage'
    ){
        labelName = JSON.parse(window.sessionStorage.getItem(taskId + 'labelName'))
    }
    if(labelName !== null && labelName!== ''){
        firstLabelName=labelName[0];
        if(operation==='write'){
            var shtml ='<li class="layui-nav-item layui-this" onclick="labelNameClick('+'\''+labelName[0]+'\''+','+'\''+colorArray[0]+'\''+')"><a href="javascript:;">'+ labelName[0]+'</a><div class="colorDiv" style="background-color: '+colorArray[0]+'"></div></li>';
            //labelInfoArray.push({labelName:labelName[0],labelInfo:[]});
            for (var i = 1; i < labelName.length; i++){
                shtml +='<li class="layui-nav-item" onclick="labelNameClick('+'\''+labelName[i]+'\''+','+'\''+colorArray[i]+'\''+')"><a href="javascript:;">'+ labelName[i]+'</a><div class="colorDiv" style="background-color: '+colorArray[i]+'"></div></li>';
                //labelInfoArray.push({labelName:labelName[i],labelInfo:[]});
            }
        }else{
            var shtml ='<li class="layui-nav-item layui-this" onclick="showAll()"><a href="javascript:;">查看全部</a></li>';
            for (var i = 0; i < labelName.length; i++){
                shtml +='<li class="layui-nav-item" onclick="labelNameClick('+'\''+labelName[i]+'\''+','+'\''+colorArray[i]+'\''+')"><a href="javascript:;">'+ labelName[i]+'</a><div class="colorDiv" style="background-color: '+colorArray[i]+'"></div></li>';
                //labelInfoArray.push({labelName:labelName[i],labelInfo:[]});
            }
        }

        $("#labelNameContainer").html(shtml);
    }
}
//加载文本
function loadDoc() {
    if(operation === 'read'){
        // 隐藏撤销按钮
        $("#revoke").hide();
        // 隐藏标注完成按钮
        $("#finish").hide();
    }else if(operation ==='write') {
        if (pageType === 'labelExamplePage') {
            docNotFinishlist = JSON.parse(
                window.sessionStorage.getItem(taskId + 'docNotFinishlist'));
        } else {
            docNotFinishlist = JSON.parse(
                window.sessionStorage.getItem(acceptId + 'docNotFinishlist'));
        }
    }
    $.ajax({
        type: "POST",
        url: '/task/loadDoc',
        data: {
            "path": docUrl,
        },
        success: function (resultData) {
            originaldoc = resultData;
            editor.setData(resultData);
        }
    })

}
//文本标注
function boldSelection(label) {
    if (document.selection) { // 老IE
        var selecter = document.selection.createRange();
        selecter.select();
        var selectStr = selecter.text; //获取选中文本
        selecter.pasteHTML(text); //替换为HTML元素，替换完会失去选取，如果选择的是textarea里的内容这里会报错
    } else { // 非老IE
        var selecter;
        if (window.getSelection()) {
            selecter = window.getSelection();
        } else {
            selecter = document.getSelection();
        }
        selecter = document.getSelection();
        var selectStr = selecter.toString();
        if (selectStr.trim() != "") {
            var rang = selecter.getRangeAt(0);
            // temp成为选中内容的父节点，达到加粗的效果
            var text="#"+selectStr+"<"+label+">#";
            // 先删除再插入达到替换的效果，
            rang.deleteContents(); // 删除选中内容
            rang.insertNode(document.createTextNode(text)); //在选中内容的起始位置插入一个节点
            // chrome中的bug，如果选中的是textarea中的内容，就会在textarea前面插入节点
        }
    }
}
//获取url参数
function getQueryVariable(name) {
    var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
    var r = window.location.search.substr(1).match(reg);
    if (r != null&&unescape(r[2])!=='null') return unescape(r[2]);
    if(null!==window.sessionStorage.getItem(name)){
        return window.sessionStorage.getItem(name);
    }
    return null;
}
//16进制颜色转rgb
function hexToRgb(hex) {
    return 'rgb(' + parseInt('0x' + hex.slice(1, 3)) + ',' + parseInt('0x' + hex.slice(3, 5))
        + ',' + parseInt('0x' + hex.slice(5, 7)) + ')';
}

//更改文本样式
function change(rgb) {

    editor.execute( 'bold' );
    editor.execute( 'fontColor', { value: rgb } );
}
//完成任务
function finishFunc(){
    // 27是http://yuyy.info/image/ols/的长度
    var docUrlParam = docUrl.substring(13, docUrl.length);
    var labelInfo = editor.getData();
    if(labelInfo===originaldoc){
        layer.msg('请先标注', {
            icon: 5, //红色不开心
            time: 2000 //2秒关闭（如果不配置，默认是3秒）
        });
        return;
    }
    var data ={
        "pageType":pageType,
        "userId":userId,
        "acceptId":acceptId,
        "taskId":taskId,
        "docUrlParam":docUrlParam,
        "labelInfo":labelInfo
    };
    // 提交标注信息
    $.ajax({
        type: "POST",
        url:"/task/storeDocLabelInfo",
        data:data,
        success:function(resultData){
            resultData=JSON.parse(resultData);
            if(resultData.meta.status === "200"){
                layer.msg('操作成功', {
                    icon: 1, //绿勾
                    time: 1000 //2秒关闭（如果不配置，默认是3秒）
                });
                window.setTimeout(function () {
                    if(docNotFinishlist!==null&&docNotFinishlist.length >0){
                        var docName=docNotFinishlist.pop().originalDoc;
                        if(pageType==='labelExamplePage'){
                            window.sessionStorage.setItem(
                                taskId + 'docNotFinishlist',
                                JSON.stringify(docNotFinishlist)
                            );
                        }else{
                            window.sessionStorage.setItem(
                                acceptId + 'docNotFinishlist',
                                JSON.stringify(docNotFinishlist)
                            );
                        }
                        window.location.href='/TextLabelPage/index.html'
                            +'?docUrl='+docUrlPre+docName
                            +'&userId='+userId
                            +'&acceptId='+acceptId
                            +'&pageType='+pageType
                            +'&pageFrom='+pageFrom
                            +'&taskId='+taskId
                            +'&operation=write';
                    }else{
                        goBackFunc();
                    }
                }, 1000);
            }else{
                layer.msg('操作失败，请刷新页面', {
                    icon: 5, //红色不开心
                    time: 2000 //2秒关闭（如果不配置，默认是3秒）
                });

            }
        }
    });
}
//返回
function goBackFunc() {
    window.location.href=reverseURLencode(pageFrom);
}
//转义
function URLencode(sStr) {
    return sStr.replace(/\%/g,"%25")
        .replace(/\+/g, '%2B')
        .replace(/\"/g,'%22')
        .replace(/\#/g,'%23')
        .replace(/\'/g, '%27')
        .replace(/\&/g, '%26')
        .replace(/\?/g, '%3F')
        .replace(/\=/g, '%3D')
        .replace(/\//g,'%2F');
}